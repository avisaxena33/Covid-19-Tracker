[{"/Users/aviralsaxena/Desktop/covid-19/src/index.js":"1","/Users/aviralsaxena/Desktop/covid-19/src/app/index.js":"2","/Users/aviralsaxena/Desktop/covid-19/src/components/Home/index.js":"3","/Users/aviralsaxena/Desktop/covid-19/src/components/Navbar/index.js":"4","/Users/aviralsaxena/Desktop/covid-19/src/components/StatsTable/index.js":"5","/Users/aviralsaxena/Desktop/covid-19/src/components/TotalSidebar/index.js":"6","/Users/aviralsaxena/Desktop/covid-19/src/utils/formatters.js":"7","/Users/aviralsaxena/Desktop/covid-19/src/components/CountryDetailPage/index.js":"8","/Users/aviralsaxena/Desktop/covid-19/src/data/usaStates.js":"9","/Users/aviralsaxena/Desktop/covid-19/src/utils/fetchCovidData.js":"10","/Users/aviralsaxena/Desktop/covid-19/src/data/europeCountries.js":"11","/Users/aviralsaxena/Desktop/covid-19/src/data/oceaniaCountries.js":"12","/Users/aviralsaxena/Desktop/covid-19/src/data/asianCountries.js":"13","/Users/aviralsaxena/Desktop/covid-19/src/data/africanCountries.js":"14","/Users/aviralsaxena/Desktop/covid-19/src/data/southAmericaCountries.js":"15"},{"size":488,"mtime":1608621699259,"results":"16","hashOfConfig":"17"},{"size":616,"mtime":1609976033589,"results":"18","hashOfConfig":"17"},{"size":3800,"mtime":1609977810958,"results":"19","hashOfConfig":"17"},{"size":1829,"mtime":1609977835648,"results":"20","hashOfConfig":"17"},{"size":5553,"mtime":1609798519272,"results":"21","hashOfConfig":"17"},{"size":2138,"mtime":1609921651516,"results":"22","hashOfConfig":"17"},{"size":164,"mtime":1609953113906,"results":"23","hashOfConfig":"17"},{"size":2750,"mtime":1609977370672,"results":"24","hashOfConfig":"17"},{"size":3580,"mtime":1609745201590,"results":"25","hashOfConfig":"17"},{"size":9053,"mtime":1609953763904,"results":"26","hashOfConfig":"17"},{"size":3010,"mtime":1609747332392,"results":"27","hashOfConfig":"17"},{"size":1566,"mtime":1609951021938,"results":"28","hashOfConfig":"17"},{"size":2346,"mtime":1609951120185,"results":"29","hashOfConfig":"17"},{"size":2970,"mtime":1609950966072,"results":"30","hashOfConfig":"17"},{"size":840,"mtime":1609951085130,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1plf74i",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/aviralsaxena/Desktop/covid-19/src/index.js",[],["69","70"],"/Users/aviralsaxena/Desktop/covid-19/src/app/index.js",["71"],"import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// Component imports\nimport Home from \"../components/Home\";\nimport CountryDetailPage from \"../components/CountryDetailPage\";\nimport { useHistory } from 'react-router-dom';\n\nconst App = () => {\n  const history = useHistory();\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/:type/:countryName\" children={<CountryDetailPage />}></Route>\n        <Route path=\"*\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/aviralsaxena/Desktop/covid-19/src/components/Home/index.js",[],"/Users/aviralsaxena/Desktop/covid-19/src/components/Navbar/index.js",["72","73","74"],"import React, { useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport './index.css';\n// list of every state + abbrev\nimport usaStates from '../../data/usaStates';\n\nconst MainNavbar = () => {\n    return (\n        <>\n            <div className=\"navbar\">\n                <Link to=\"/\" className=\"navbar-title\">\n                    <h3 className=\"navbar__option\">Covid-19 Tracker</h3>\n                </Link>\n                <Link to=\"/State/USA\" className=\"navbar-title\">\n                    <h3 className=\"navbar__option\">USA</h3>\n                </Link>\n                <Link to=\"/Country/Canada\" className=\"navbar-title\">\n                    <h3 className=\"navbar__option\">Canada</h3>\n                </Link>\n                <Link to=\"/Country/Asia\" className=\"navbar-title\">\n                    <h3 className=\"navbar__option\">Asia</h3>\n                </Link>\n                <Link to=\"/Country/Oceania\" className=\"navbar-title\">\n                    <h3 className=\"navbar__option\">Oceania</h3>\n                </Link>\n                <Link to=\"/Country/Africa\" className=\"navbar-title\">\n                    <h3 className=\"navbar__option\">Africa</h3>\n                </Link>\n                <Link to=\"/Country/South America\" className=\"navbar-title\">\n                    <h3 className=\"navbar__option\">South America</h3>\n                </Link>\n                {/* Commenting out for now -- in development\n                <Link to=\"/About/Covid\" className=\"navbar-title\">\n                    <h3 className=\"navbar__option\">Covid-19</h3>\n                </Link>\n                <Link to=\"/About/Me\" className=\"navbar-title\">\n                    <h3 className=\"navbar__option\">About Me</h3>\n                </Link>\n                */}\n            </div>\n        </>\n    )\n}\n\nexport default MainNavbar\n","/Users/aviralsaxena/Desktop/covid-19/src/components/StatsTable/index.js",["75","76","77","78","79","80","81","82","83","84","85","86"],"import React, { useState, useEffect } from 'react';\nimport './index.css';\nimport numberWithCommas from '../../utils/formatters';\n\nconst StatsTable = ({ typeData, totalData, title, type }) => {\n    const [searchText, setSearchText] = useState('');\n\n    useEffect(() => {\n        applyFilters();\n    }, [searchText])\n\n    const applyFilters = () => {\n        let filter = searchText.toUpperCase();\n        let table = document.getElementById(title);\n        let tr = table.getElementsByTagName(\"tr\");\n        for (let i = 0; i < tr.length; i++) {\n            let td = tr[i].getElementsByTagName(\"td\")[0];\n            if (td) {\n              let txtValue = td.textContent || td.innerText;\n              if (txtValue.toUpperCase().indexOf(filter) > -1) {\n                tr[i].style.display = \"\";\n              } else {\n                tr[i].style.display = \"none\";\n              }\n            }\n        }\n    };\n\n    return (\n        <>\n            <div className=\"country__table\">\n                <div className=\"top\">\n                    <h2>{title}</h2>\n                    <input class=\"search\" type=\"text\" value={searchText} onChange={(e) => setSearchText(e.target.value)} placeholder=\"search here\" />\n                </div>\n                <div className=\"country__table__scroll\">\n                    <table id={title}>\n                        <tr>\n                            <th>{type}</th>\n                            <th>Total Cases</th>\n                            <th>Cases Today</th>\n                            <th>Cases Per Million</th>\n                            <th>Total Deaths</th>\n                            <th>Deaths Today</th>\n                            <th>Deaths Per Million</th>\n                            <th>Activate Cases</th>\n                            <th>Total Tests</th>\n                            <th>Total Recovered</th>\n                            <th>Total Critical</th>\n                        </tr>\n                        <tr>\n                            <td className=\"flag__container\">TOTAL</td>\n                            <td className=\"cases__color\">{numberWithCommas(totalData.cases)}</td>\n                            <td className=\"cases__color\">{numberWithCommas(totalData.todayCases)}</td>\n                            <td className=\"cases__color\">{numberWithCommas(totalData.casesPerOneMillion)}</td>\n                            <td className=\"death__color\">{numberWithCommas(totalData.deaths)}</td>\n                            <td className=\"death__color\">{numberWithCommas(totalData.todayDeaths)}</td>\n                            <td className=\"death__color\">{numberWithCommas(totalData.deathsPerOneMillion)}</td>\n                            <td className=\"active__color\">{numberWithCommas(totalData.active)}</td>\n                            <td className=\"active__color\">{numberWithCommas(totalData.tests)}</td>\n                            <td className=\"recovered__color\">{numberWithCommas(totalData.recovered)}</td>\n                            <td className=\"critical__color\">{numberWithCommas(totalData.critical)}</td>\n                        </tr>\n                        {typeData.map((type) => {\n                            return (\n                                <>\n                                    <tr>\n                                        <td className=\"flag__container\">\n                                            {type.countryInfo && type.countryInfo.flag && <img src={type.countryInfo.flag} className=\"flag\"></img>}\n                                            <h7 class=\"typeName\">{type.name || type.state || type.province}</h7>\n                                        </td>\n                                        <td className=\"cases__color\">{type.cases || type.cases == 0 ? numberWithCommas(type.cases) : 'Unknown'}</td>\n                                        <td className=\"cases__color\">{type.todayCases || type.todayCases == 0  ? numberWithCommas(type.todayCases) : 'Unknown'}</td>\n                                        <td className=\"cases__color\">{type.casesPerOneMillion || type.casesPerOneMillion == 0  ? numberWithCommas(type.casesPerOneMillion) : 'Unknown'}</td>\n                                        <td className=\"death__color\">{type.deaths || type.deaths == 0 ? numberWithCommas(type.deaths) : 'Unknown'}</td>\n                                        <td className=\"death__color\">{type.todayDeaths || type.todayDeaths == 0  ? numberWithCommas(type.todayDeaths) : 'Unknown'}</td>\n                                        <td className=\"death__color\">{type.deathsPerOneMillion || type.deathsPerOneMillion == 0  ? numberWithCommas(type.deathsPerOneMillion) : 'Unknown'}</td>\n                                        <td className=\"active__color\">{type.active || type.active == 0  ? numberWithCommas(type.active) : 'Unknown'}</td>\n                                        <td className=\"active__color\">{type.tests || type.tests == 0  ? numberWithCommas(type.tests) : 'Unknown'}</td>\n                                        <td className=\"recovered__color\">{type.recovered || type.recovered == 0  ? numberWithCommas(type.recovered) : 'Unknown'}</td>\n                                        <td className=\"critical__color\">{type.critical || type.critical == 0  ? numberWithCommas(type.critical) : 'Unknown'}</td>\n                                    </tr>\n                                </>\n                            )\n                        })}\n                    </table>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default StatsTable;\n","/Users/aviralsaxena/Desktop/covid-19/src/components/TotalSidebar/index.js",["87","88","89"],"import React, { useState, useEffect } from 'react';\nimport { useHistory, Link } from 'react-router-dom'\nimport './index.css'\nimport numberWithCommas from '../../utils/formatters';\nimport { fetchGlobalData } from '../../utils/fetchCovidData';\n\nconst TotalSidebar = () => {\n    const [globalResponse, setGlobalResponse] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n\n    const currentDate = new Date().toLocaleString();\n    const currentTimezone = new Date().toLocaleTimeString('en-us',{timeZoneName:'short'}).split(' ')[2];\n\n    const fetchAllData = async() => {\n        await Promise.all([fetchGlobalData(setGlobalResponse)]);\n        await setIsLoading(false);\n        liveUpdates();\n    }\n\n    const liveUpdates = async() => {\n        await Promise.all([fetchGlobalData(setGlobalResponse)]);\n        await liveUpdates();\n    }\n\n    useEffect(() => {\n        fetchAllData();\n    }, [])\n\n    if (isLoading) {\n        return (\n            <>\n                <div className=\"sidebar\">\n                    <h1>Loading ...</h1>\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <>\n            <div className=\"sidebar\">\n                <h1>World Totals</h1>\n                <h7>Updated as of: {currentDate} {currentTimezone}</h7>\n                <h1 className=\"cases__color\">Cases: {numberWithCommas(globalResponse.cases)}</h1>\n                <h1 className=\"death__color\">Deaths: {numberWithCommas(globalResponse.deaths)}</h1>\n                <h1 className=\"active__color\">Activate Cases: {numberWithCommas(globalResponse.active)}</h1>\n                <h1 className=\"critical__color\">Critical Cases: {numberWithCommas(globalResponse.critical)}</h1>\n                <h1 className=\"recovered__color\">Recovered: {numberWithCommas(globalResponse.recovered)}</h1>\n                <h1 className=\"recovered__color\">Tests: {numberWithCommas(globalResponse.tests)}</h1>\n                {globalResponse.affectedCountries && <h1 className=\"death__color\">Countries Affected: {numberWithCommas(globalResponse.affectedCountries)}</h1>}\n            </div>\n        </>\n    )\n}\n\nexport default TotalSidebar;\n","/Users/aviralsaxena/Desktop/covid-19/src/utils/formatters.js",[],"/Users/aviralsaxena/Desktop/covid-19/src/components/CountryDetailPage/index.js",["90","91","92","93","94","95"],"import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route, useParams } from \"react-router-dom\";\nimport './index.css';\nimport StatsTable from '../StatsTable';\nimport TotalSidebar from '../TotalSidebar';\nimport Navbar from \"../Navbar\";\nimport { fetchUsaPageData, fetchCanadaPageData, fetchEuropePageData, fetchAsiaPageData, fetchOceaniaPageData, fetchAfricaResponse, fetchSouthAmericaPageData, fetchAfricaPageData } from '../../utils/fetchCovidData';\n\n\nconst CountryDetailPage = () => {\n    const { type, countryName } = useParams();\n    const title = countryName.concat(' ').concat('Statistics');\n\n    const [typeResponse, setTypeResponse] = useState({});\n    const [totalResponse, setTotalResponse] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n\n    const fetchCorrectData = async(countryName) => {\n        switch (countryName) {\n            case 'USA':\n                await fetchUsaPageData(setTypeResponse, setTotalResponse);\n                break;\n            case 'Canada':\n                await fetchCanadaPageData(setTypeResponse, setTotalResponse);\n                break;\n            case 'Europe':\n                await fetchEuropePageData(setTypeResponse, setTotalResponse);\n                break;\n            case 'Asia':\n                await fetchAsiaPageData(setTypeResponse, setTotalResponse);\n                break;\n            case 'Oceania':\n                await fetchOceaniaPageData(setTypeResponse, setTotalResponse);\n                break;\n            case 'Africa':\n                await fetchAfricaPageData(setTypeResponse, setTotalResponse);\n                break;\n            case 'South America':\n                await fetchSouthAmericaPageData(setTypeResponse, setTotalResponse);\n                break;\n        }\n    }\n\n    const fetchAllData = async() => {\n        await fetchCorrectData(countryName);            \n        await setIsLoading(false);\n    }\n\n    useEffect(() => {\n        fetchAllData();\n    }, [countryName])\n\n    if (isLoading) {\n        return (\n            <>\n                <div className=\"loading\">\n                    <h1>Loading ...</h1>\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <>\n            <div className=\"home\">\n                <Navbar />\n                <div className=\"mainBody\">\n                    <div className=\"leftSidebar\">\n                        <TotalSidebar />\n                    </div>\n                    <div className=\"data__tables\">\n                        <StatsTable typeData={typeResponse} totalData={totalResponse} title={title} type={type} />\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default CountryDetailPage;\n","/Users/aviralsaxena/Desktop/covid-19/src/data/usaStates.js",[],"/Users/aviralsaxena/Desktop/covid-19/src/utils/fetchCovidData.js",["96"],"import europeCountries from '../data/europeCountries';\nimport asiaCountries from '../data/asianCountries';\nimport oceaniaCountries from '../data/oceaniaCountries';\nimport africaCountries from '../data/africanCountries';\nimport southAmericaCountries from '../data/southAmericaCountries';\nimport asianCountries from '../data/asianCountries';\n\n\nconst all_countries_url = 'https://corona.lmao.ninja/v2/countries?yesterday&sort';\nconst global_url = 'https://corona.lmao.ninja/v2/all?yesterday';\nconst usa_states_url = 'https://corona.lmao.ninja/v2/states?sort&yesterday';\nconst usa_url = 'https://corona.lmao.ninja/v2/countries/USA?yesterday=true&strict=true&query';\nconst canada_url = 'https://corona.lmao.ninja/v2/countries/Canada?yesterday=true&strict=true&query';\nconst jhu_url = 'https://corona.lmao.ninja/v2/jhucsse';\nconst continent_url = 'https://corona.lmao.ninja/v2/continents/:query?yesterday&strict';\nconst multipleCountriesUrl = 'https://corona.lmao.ninja/v2/countries/:query?yesterday';\n\nexport const fetchAllCountriesData = async(setCountriesResponse) => {\n    const response = await fetch(all_countries_url);\n    const results = await response.json();\n    results.forEach(country => {\n        country['name'] = country['country']\n    });\n    setCountriesResponse(results);\n}\n\nexport const fetchGlobalData = async(setGlobalResponse) => {\n    const response = await fetch(global_url);\n    const results = await response.json();\n    setGlobalResponse(results);\n}\n\nexport const fetchGlobalPageData = async(setTypeResponse, setTotalResponse) => {\n    await Promise.all([fetchAllCountriesData(setTypeResponse), \n        fetchGlobalData(setTotalResponse)]);\n}\n\nexport const fetchUsaStatesData = async(setUsaStatesResponse) => {\n    const response = await fetch(usa_states_url);\n    const results = await response.json();\n    results.forEach(state => {\n        state['name'] = state['state'];\n    });\n    setUsaStatesResponse(results);\n}\n\nexport const fetchUsaData = async(setUsaResponse) => {\n    const response = await fetch(usa_url);\n    const results = await response.json();\n    setUsaResponse(results);\n}\n\nexport const fetchUsaPageData = async(setTypeResponse, setTotalResponse) => {\n    await Promise.all([fetchUsaStatesData(setTypeResponse), fetchUsaData(setTotalResponse)]);\n}\n\nexport const fetchCanadaData = async(setCanadaResponse) => {\n    const response = await fetch(canada_url);\n    const results = await response.json();\n    setCanadaResponse(results);\n}\n\nexport const fetchCanadaProvinceData = async(setCanadaProvincesResponse) => {\n    const response = await fetch(jhu_url);\n    const results = await response.json();\n    let provinces = [];\n    results.forEach(province => {\n        if (province.country === 'Canada') {\n            province['name'] = province['province'];\n            province['cases'] = province['stats']['confirmed'];\n            province['deaths'] = province['stats']['deaths'];\n            province['recovered'] = province['stats']['recovered'];\n            provinces.push(province);\n        }\n    });\n    setCanadaProvincesResponse(provinces);\n}\n\nexport const fetchCanadaPageData = async(setTypeResponse, setTotalResponse) => {\n    await Promise.all([fetchCanadaProvinceData(setTypeResponse), \n        fetchCanadaData(setTotalResponse)]);\n}\n\nexport const fetchEuropeResponse = async(setEuropeResponse) => {\n    const url = continent_url.replace(':query', 'Europe');\n    const response = await fetch(url);\n    const results = await response.json();\n    setEuropeResponse(results);\n}\n\nexport const fetchEuropeCountriesResponse = async(setEuropeCountriesResponse) => {\n    let queryString = europeCountries.map(country => {\n        return country.code;\n    }).join(',');\n    const url = multipleCountriesUrl.replace(':query', queryString);\n    const response = await fetch(url);\n    const results = await response.json();\n    results.forEach(country => {\n        country['name'] = country['country'];\n    });\n    setEuropeCountriesResponse(results);\n}\n\nexport const fetchEuropePageData = async(setTypeResponse, setTotalResponse) => {\n    await Promise.all([fetchEuropeCountriesResponse(setTypeResponse), \n        fetchEuropeResponse(setTotalResponse)]);\n}\n\nexport const fetchAsiaResponse = async(setAsiaResponse) => {\n    const url = continent_url.replace(':query', 'Asia');\n    const response = await fetch(url);\n    const results = await response.json();\n    setAsiaResponse(results);\n}\n\nexport const fetchAsiaCountriesResponse = async(setAsiaCountriesResponse) => {\n    let queryString = asianCountries.map(country => {\n        return (country.code || country.country);\n    }).join(',');\n    const url = multipleCountriesUrl.replace(':query', queryString);\n    const response = await fetch(url);\n    const results = await response.json();\n    results.forEach(country => {\n        country['name'] = country['country'];\n    });\n    setAsiaCountriesResponse(results);\n}\n\nexport const fetchAsiaPageData = async(setTypeResponse, setTotalResponse) => {\n    await Promise.all([fetchAsiaCountriesResponse(setTypeResponse), \n        fetchAsiaResponse(setTotalResponse)]);\n}\n\nexport const fetchOceaniaResponse = async(setOceaniaResponse) => {\n    const url = continent_url.replace(':query', 'Oceania');\n    const response = await fetch(url);\n    const results = await response.json();\n    setOceaniaResponse(results);\n}\n\nexport const fetchOceaniaCountriesResponse = async(setOceaniaCountriesResponse) => {\n    let queryString = oceaniaCountries.map(country => {\n        return (country.code || country.country);\n    }).join(',');\n    const url = multipleCountriesUrl.replace(':query', queryString);\n    const response = await fetch(url);\n    const results = await response.json();\n    results.forEach(country => {\n        country['name'] = country['country'];\n    });\n    setOceaniaCountriesResponse(results);\n}\n\nexport const fetchOceaniaPageData = async(setTypeResponse, setTotalResponse) => {\n    await Promise.all([fetchOceaniaCountriesResponse(setTypeResponse), \n        fetchOceaniaResponse(setTotalResponse)]);\n}\n\nexport const fetchAfricaResponse = async(setAfricaResponse) => {\n    const url = continent_url.replace(':query', 'Africa');\n    const response = await fetch(url);\n    const results = await response.json();\n    setAfricaResponse(results);\n}\n\nexport const fetchAfricaCountriesResponse = async(setAfricaCountriesResponse) => {\n    let queryString = africaCountries.map(country => {\n        return (country.code || country.country);\n    }).join(',');\n    const url = multipleCountriesUrl.replace(':query', queryString);\n    const response = await fetch(url);\n    const results = await response.json();\n    results.forEach(country => {\n        country['name'] = country['country'];\n    });\n    setAfricaCountriesResponse(results);\n}\n\nexport const fetchAfricaPageData = async(setTypeResponse, setTotalResponse) => {\n    await Promise.all([fetchAfricaCountriesResponse(setTypeResponse), \n        fetchAfricaResponse(setTotalResponse)]);\n}\n\nexport const fetchSouthAmericaResponse = async(setSouthAmericaResponse) => {\n    const url = continent_url.replace(':query', 'South America');\n    const response = await fetch(url);\n    const results = await response.json();\n    setSouthAmericaResponse(results);\n}\n\nexport const fetchSouthAmericaCountriesResponse = async(setSouthAmericaCountriesResponse) => {\n    let queryString = southAmericaCountries.map(country => {\n        return (country.code || country.country);\n    }).join(',');\n    const url = multipleCountriesUrl.replace(':query', queryString);\n    const response = await fetch(url);\n    const results = await response.json();\n    results.forEach(country => {\n        country['name'] = country['country'];\n    });\n    setSouthAmericaCountriesResponse(results);\n}\n\nexport const fetchSouthAmericaPageData = async(setTypeResponse, setTotalResponse) => {\n    await Promise.all([fetchSouthAmericaCountriesResponse(setTypeResponse), \n        fetchSouthAmericaResponse(setTotalResponse)]);\n}\n\nexport const fetchHomePageData = async(setCountriesResponse, setGlobalResponse, \n    setUsaResponse, setUsaStatesResponse, setCanadaResponse, setCanadaProvincesResponse, \n    setEuropeResponse, setEuropeCountriesResponse, setAsiaResponse, setAsiaCountriesResponse, \n    setOceaniaResponse, setOceaniaCountriesResponse, setAfricaResponse, \n    setAfricaCountriesResponse, setSouthAmericaResponse, setSouthAmericaCountriesResponse) => {\n    await Promise.all([fetchGlobalPageData(setCountriesResponse, setGlobalResponse), \n        fetchUsaPageData(setUsaStatesResponse, setUsaResponse), \n        fetchCanadaPageData(setCanadaProvincesResponse, setCanadaResponse), \n        fetchEuropePageData(setEuropeCountriesResponse, setEuropeResponse), \n        fetchAsiaPageData(setAsiaCountriesResponse, setAsiaResponse), \n        fetchOceaniaPageData(setOceaniaCountriesResponse, setOceaniaResponse), \n        fetchAfricaPageData(setAfricaCountriesResponse, setAfricaResponse), \n        fetchSouthAmericaPageData(setSouthAmericaCountriesResponse, setSouthAmericaResponse)]);\n}\n","/Users/aviralsaxena/Desktop/covid-19/src/data/europeCountries.js",[],"/Users/aviralsaxena/Desktop/covid-19/src/data/oceaniaCountries.js",[],"/Users/aviralsaxena/Desktop/covid-19/src/data/asianCountries.js",[],"/Users/aviralsaxena/Desktop/covid-19/src/data/africanCountries.js",[],"/Users/aviralsaxena/Desktop/covid-19/src/data/southAmericaCountries.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":8,"column":9,"nodeType":"103","messageId":"104","endLine":8,"endColumn":16},{"ruleId":"101","severity":1,"message":"105","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},{"ruleId":"101","severity":1,"message":"106","line":2,"column":10,"nodeType":"103","messageId":"104","endLine":2,"endColumn":20},{"ruleId":"101","severity":1,"message":"107","line":5,"column":8,"nodeType":"103","messageId":"104","endLine":5,"endColumn":17},{"ruleId":"108","severity":1,"message":"109","line":10,"column":8,"nodeType":"110","endLine":10,"endColumn":20,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":69,"column":91,"nodeType":"114","endLine":69,"endColumn":141},{"ruleId":"115","severity":1,"message":"116","line":72,"column":96,"nodeType":"117","messageId":"118","endLine":72,"endColumn":98},{"ruleId":"115","severity":1,"message":"116","line":73,"column":106,"nodeType":"117","messageId":"118","endLine":73,"endColumn":108},{"ruleId":"115","severity":1,"message":"116","line":74,"column":122,"nodeType":"117","messageId":"118","endLine":74,"endColumn":124},{"ruleId":"115","severity":1,"message":"116","line":75,"column":98,"nodeType":"117","messageId":"118","endLine":75,"endColumn":100},{"ruleId":"115","severity":1,"message":"116","line":76,"column":108,"nodeType":"117","messageId":"118","endLine":76,"endColumn":110},{"ruleId":"115","severity":1,"message":"116","line":77,"column":124,"nodeType":"117","messageId":"118","endLine":77,"endColumn":126},{"ruleId":"115","severity":1,"message":"116","line":78,"column":99,"nodeType":"117","messageId":"118","endLine":78,"endColumn":101},{"ruleId":"115","severity":1,"message":"116","line":79,"column":97,"nodeType":"117","messageId":"118","endLine":79,"endColumn":99},{"ruleId":"115","severity":1,"message":"116","line":80,"column":108,"nodeType":"117","messageId":"118","endLine":80,"endColumn":110},{"ruleId":"115","severity":1,"message":"116","line":81,"column":105,"nodeType":"117","messageId":"118","endLine":81,"endColumn":107},{"ruleId":"101","severity":1,"message":"106","line":2,"column":10,"nodeType":"103","messageId":"104","endLine":2,"endColumn":20},{"ruleId":"101","severity":1,"message":"119","line":2,"column":22,"nodeType":"103","messageId":"104","endLine":2,"endColumn":26},{"ruleId":"108","severity":1,"message":"120","line":27,"column":8,"nodeType":"110","endLine":27,"endColumn":10,"suggestions":"121"},{"ruleId":"101","severity":1,"message":"122","line":2,"column":27,"nodeType":"103","messageId":"104","endLine":2,"endColumn":33},{"ruleId":"101","severity":1,"message":"123","line":2,"column":35,"nodeType":"103","messageId":"104","endLine":2,"endColumn":41},{"ruleId":"101","severity":1,"message":"124","line":2,"column":43,"nodeType":"103","messageId":"104","endLine":2,"endColumn":48},{"ruleId":"101","severity":1,"message":"125","line":7,"column":111,"nodeType":"103","messageId":"104","endLine":7,"endColumn":130},{"ruleId":"126","severity":1,"message":"127","line":19,"column":9,"nodeType":"128","messageId":"129","endLine":41,"endColumn":10},{"ruleId":"108","severity":1,"message":"120","line":51,"column":8,"nodeType":"110","endLine":51,"endColumn":21,"suggestions":"130"},{"ruleId":"101","severity":1,"message":"131","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":21},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useHistory' is defined but never used.","'usaStates' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'applyFilters'. Either include it or remove the dependency array.","ArrayExpression",["134"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",["135"],"'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'fetchAfricaResponse' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["136"],"'asiaCountries' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [applyFilters, searchText]",{"range":"143","text":"144"},"Update the dependencies array to be: [fetchAllData]",{"range":"145","text":"146"},"Update the dependencies array to be: [countryName, fetchAllData]",{"range":"147","text":"148"},[301,313],"[applyFilters, searchText]",[907,909],"[fetchAllData]",[2004,2017],"[countryName, fetchAllData]"]